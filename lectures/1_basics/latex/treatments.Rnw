%%% Title:    Missing Data in R: Missing Data Treatments
%%% Author:   Kyle M. Lang
%%% Created:  2015-11-06
%%% Modified: 2023-01-28

\documentclass{beamer}
\usetheme{Utrecht}

\usepackage{graphicx}
\usepackage[natbibapa]{apacite}
\usepackage[libertine]{newtxmath}
\usepackage{fancybox}
\usepackage{booktabs}
\usepackage{eurosym}
\usepackage{caption}

\captionsetup{labelformat = empty}

\newcommand{\rmsc}[1]{\textrm{\textsc{#1}}}

\title{Simple Missing Data Treatments}
\subtitle{Utrecht University Winter School: Missing Data in R}
\author{Kyle M. Lang}
\institute{Department of Methodology \& Statistics\\Utrecht University}
\date{}

%------------------------------------------------------------------------------%

\begin{document}

<<knitr_setup, include = FALSE, cache = FALSE>>=
opts_chunk$set(size = "footnotesize",
               fig.align = "center",
               fig.path = "figure/intro-",
               message = FALSE,
               warning = FALSE,
               comment = "")
opts_knit$set(root.dir = "../../../")
knit_theme$set('edit-kwrite')
@

<<r_setup, inclcude = FALSE, echo = FALSE>>=
options(width = 60)

set.seed(235711)

library(knitr)
library(ggplot2)
library(mice)
library(mvtnorm)
library(xtable)
library(pROC)
library(dplyr)
library(magrittr)
library(naniar)
library(ggpubr)
library(lme4)
library(lavaan)

dataDir <- "data/"

source("code/supportFunctions.R")
source("code/sim_missing/code/simMissingness.R")
@

%------------------------------------------------------------------------------%

\begin{frame}[t, plain]
  \titlepage
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Outline}
  \tableofcontents
\end{frame}

%------------------------------------------------------------------------------%

\section{Bad Methods}

%------------------------------------------------------------------------------%

\subsection{Deletion-Based Methods}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Bad Methods (These almost never work)}

  Listwise Deletion (Complete Case Analysis)
  \begin{itemize}
  \item Use only complete observations for the analysis
    \begin{itemize}
    \item Very wasteful (can throw out lots of useful data)
    \item Loss of statistical power
    \end{itemize}
  \end{itemize}

  \vb

  Pairwise Deletion (Available Case Analysis)
  \begin{itemize}
  \item Use only complete pairs of observations for analysis
    \begin{itemize}
    \item Different samples sizes for different parameter estimates
    \item Can cause computational issues
    \end{itemize}
  \end{itemize}

\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  ## Read in some example data:
  dat0 <- dat1 <- readRDS(paste0(dataDir, "diabetes_norm.rds"))
  
  ## Simulated missingness based on 'bmi':
  m <- simLinearMissingness(data  = dat1,
                            pm    = 0.30,
                            preds = "bmi",
                            auc   = 0.85)$r
  
  ## Impose missing on 'glu' according to the missingness above:
  dat1[m, "glu"] <- NA
  @ 
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}
 
  <<echo = FALSE, cache = TRUE, fig.asp = 0.55>>=
  dat00 <- dat0
  dat0$Response <- factor(m, labels = c("Observed", "Missing"))
  
  p0 <- ggplot(data = dat0, mapping = aes(x = bmi, y = glu)) +
      theme_classic() +
      theme(text = element_text(family = "Courier", size = 16)) +
      xlab("BMI") +
      ylab("Blood Glucose")
  
  ggarrange(
      p0 + 
      geom_point(size = 0.5) + 
      ggtitle("Fully Observed Data") +
      theme(text = element_text(size = 8),
            axis.title = element_blank(),
            plot.title = element_text(face = "bold", hjust = 0.5)
            ),
      
      p0 + 
      geom_point(aes(color = Response), size = 0.5) +
      geom_smooth(method = "lm", se = FALSE, color = "blue", linewidth = 0.5) + 
      geom_smooth(data = dat1,
                  mapping = aes(bmi, glu),
                  method = "lm",
                  se = FALSE,
                  color = "red",
                  linewidth = 0.5) + 
      scale_color_manual(values = c("black", "gray")) +
      ggtitle("Incomplete Data") +
      theme(text = element_text(size = 8),
            axis.title = element_blank(),
            axis.text.y = element_blank(),
            plot.title = element_text(face = "bold", hjust = 0.5),
            legend.position = "none"),
      
      ncol = 2,
      widths = c(1.05, 1)
  ) %>%
      annotate_figure(left = text_grob("Blood Glucose", 
                                       family = "Courier", 
                                       size = 10,
                                       rot = 90),
                      bottom = text_grob("BMI", family = "Courier", size = 10)
                      )

  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  \begin{columns}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      dat00 %<>% data.frame(g = "Fully Observed")
      dat1 %<>% data.frame(g = "MAR w/ Deletion")
      
      rbind(dat00, dat1) %>%
          ggplot(aes(x = glu, color = g)) +
          geom_density(size = 1) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          ylab("Density") +
          xlab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
      @
      
    \end{column}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      rbind(dat00, dat1) %>%
          ggplot(aes(x = bmi, y = glu, color = g)) +
          geom_density_2d(bins = 15) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          xlab("BMI") +
          ylab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.85, 0.075),
                legend.title = element_blank()
                )
      @
      
    \end{column}
  \end{columns}

\end{frame}

%------------------------------------------------------------------------------%

\subsection{Deterministic Imputation Methods}

%------------------------------------------------------------------------------%

\begin{frame}{Bad Methods (These almost never work)}

  \begin{columns}
    \begin{column}{0.5\textwidth}

      (Unconditional) Mean Substitution
      \begin{itemize}
      \item Replace $Y_{mis}$ with $\bar{Y}_{obs}$
        \begin{itemize}
        \item Negatively biases regression slopes and correlations
        \item Attenuates measures of linear association
        \end{itemize}
      \end{itemize}

    \end{column}
    \begin{column}{0.5\textwidth}

      \only<1>{
        
        <<echo = FALSE, cache = TRUE>>=
        p1 <- p0 + 
            geom_point(aes(color = Response)) + 
            scale_color_manual(values = c("black", "gray")) +
            theme(legend.position = "none")
        
        p1
        @
        
      }
      \only<2>{
        
        <<echo = FALSE, cache = TRUE>>=
        imputed <- dat1 %>%
            dplyr::select(bmi, glu) %>%
            mice(m         = 1,
                 maxit     = 1,
                 method    = "mean",
                 printFlag = FALSE) %>%
            complete(1)
        
        p2 <- p1 + geom_point(data    = imputed[m, ],
                              mapping = aes(y = glu, x = bmi),
                              colour  = "red")
        p2
        @
        
      }
      
      \only<3>{
        
        <<echo = FALSE, cache = TRUE>>=
        p2 + geom_smooth(data    = dat0,
                         mapping = aes(y = glu, x = bmi),
                         method  = "lm",
                         color   = "blue",
                         se      = FALSE) +
            geom_smooth(data    = imputed,
                        mapping = aes(y = glu, x = bmi),
                        method  = "lm",
                        color   = "red",
                        se      = FALSE)
        @
        
      }
      
    \end{column}
  \end{columns}

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}
  
  \begin{columns}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      imputed <- dat1 %>%
          dplyr::select(-bmi, -glu, -g) %>%
          data.frame(imputed, g = "Mean Sub.")
      
      rbind(dat00, imputed) %>%
          ggplot(aes(x = glu, color = g)) +
          geom_density(size = 1) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          ylab("Density") +
          xlab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
      @
      
    \end{column}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      rbind(dat00, imputed) %>%
          ggplot(aes(x = bmi, y = glu, color = g)) +
          geom_density_2d(bins = 15) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          xlab("BMI") +
          ylab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.85, 0.075),
                legend.title = element_blank()
                )
      @
      
    \end{column}
  \end{columns}
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Implementation}
  
  <<eval = FALSE>>=
  dat1[m, "glu"] <- mean(dat1$glu, na.rm = TRUE)

  miceOut <- mice(data = dat1, m = 1, maxit = 1, method = "mean")
  impData <- complete(miceOut, 1)
  @ 
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Bad Methods (These almost never work)}

  \begin{columns}
    \begin{column}{0.5\textwidth}

      Deterministic Regression Imputation\\
      (Conditional Mean Substitution)
      \begin{itemize}
      \item Replace $Y_{mis}$ with $\widehat{Y}_{mis}$ from some regression
        equation
        \begin{itemize}
        \item Positively biases regression slopes and correlations
        \item Inflates measures of linear association
        \end{itemize}
      \end{itemize}

    \end{column}
    \begin{column}{0.5\textwidth}

      \only<1>{
        
        <<echo = FALSE>>=
        p1
        @ 
        
      }
      
      \only<2>{

        <<echo = FALSE, cache = TRUE>>=
        imputed <- dat1 %>%
            dplyr::select(bmi, glu) %>%
            mice(m         = 1,
                 maxit     = 1,
                 method    = "norm.predict",
                 printFlag = FALSE) %>%
            complete(1)

        p2 <- p1 + geom_point(data = imputed[m, ],
                              mapping = aes(y = glu, x = bmi),
                              colour = "red")
        p2
        @

      }
      \only<3>{
        
        <<echo = FALSE, cache = TRUE>>=
        p2 + geom_smooth(data    = dat0,
                         mapping = aes(y = glu, x = bmi),
                         method  = "lm",
                         color   = "blue",
                         se      = FALSE) +
            geom_smooth(data    = imputed,
                        mapping = aes(y = glu, x = bmi),
                        method  = "lm",
                        color   = "red",
                        se      = FALSE)
        @

      }
      
    \end{column}
  \end{columns}
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}
  
  \begin{columns}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      imputed <- dat1 %>%
          dplyr::select(-bmi, -glu, -g) %>%
          data.frame(imputed, g = "Det. Reg. Imp.")
      
      rbind(dat00, imputed) %>%
          ggplot(aes(x = glu, color = g)) +
          geom_density(size = 1) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          ylab("Density") +
          xlab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
      @
      
    \end{column}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      rbind(dat00, imputed) %>%
          ggplot(aes(x = bmi, y = glu, color = g)) +
          geom_density_2d(bins = 15) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          xlab("BMI") +
          ylab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.85, 0.075),
                legend.title = element_blank()
                )
      @
      
    \end{column}
  \end{columns}
  
\end{frame}

\watermarkon %-----------------------------------------------------------------%

\begin{frame}[fragile]{Implementation}
 
  <<eval = FALSE>>=
  miceOut <- mice(data = dat1, m = 1, method = "norm.predict") 
  impData <- complete(miceOut, 1)
  @ 
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Bad Methods (These almost never work)}

  \begin{center}
    \ovalbox{General Issues with Deletion-Based Methods}
  \end{center}

  \begin{itemize}
  \item Biased parameter estimates unless data are MCAR
  \item Generalizability issues
  \end{itemize}

  \va

  \begin{center}
    \ovalbox{General Issues with Simple Single Imputation Methods}
  \end{center}

  \begin{itemize}
  \item Biased parameter estimates even when data are MCAR
  \item Attenuates variability in any treated variables
  \end{itemize}

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Bad Methods (These almost never work)}

  Averaging Available Items (Person-Mean Imputation)
  \begin{itemize}
  \item Compute aggregate scores using only available values
    \begin{itemize}
    \item Missing data must be MCAR
    \item Each item must contributes equally to the aggregate score
    \end{itemize}
  \end{itemize}

  \vb

  Last Observation Carried Forward (LOCF)
  \begin{itemize}
  \item Replace post-dropout values with the most recent observed value
    \begin{itemize}
    \item Assume that dropouts would maintain their last known values
    \item Attenuates estimates of growth/development
    \end{itemize}
  \end{itemize}

\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}{LOCF}
  
  <<echo = FALSE, cache = TRUE>>=
  ## Stash the diabetes datasets:
  diabetes <- list(dat0 = dat0, dat00 = dat00, dat1 = dat1)
  
  ## Simulate some longitudinal data with random slopes:
  n1 <- 5
  n2 <- 50
  
  s     <- 1.0
  gamma <- c(1.5, 1.25)
  tau   <- matrix(c(1.0, -0.3, -0.3, 1.0), 2, 2)
  
  U    <- rmvnorm(n2, gamma, tau)
  time <- matrix(1:n1 - 1)
  tmp  <- U[ , 1] + U[ , 2] %*% t(time)
  
  dat1 <- dat2 <- dat3 <-
      data.frame(y = as.numeric(tmp) + rnorm(n1 * n2, 0, s),
                 t = rep(0:(n1 - 1), each = n2),
                 id = rep(1:n2, n1)
                 ) %>%
      arrange(id)
  
  ## Apply random attrition:
  dat2$y <- dat1 %$% tapply(y, id, attrit, pComp = 0.25) %>% unlist()
  
  ## Treat attrition with LOCF:
  dat3$y <- dat2 %$% tapply(y, id, locf) %>% unlist()
  
  ## Create some missingness indicators for plotting purposes:
  dat3$m  <- is.na(dat2$y)
  dat3$m2 <- dat3 %$% tapply(m,
                             id,
                             function(x) {
                                 tmp <- (which(x) - 1)[1]
                                 x[tmp] <- TRUE
                                 x
                             }
                             ) %>% unlist()
  
  p00 <- ggplot(data = dat1, mapping = aes(y = y, x = t)) +
      ylab("Y") +
      xlab("Time") +
      theme_classic() +
      theme(text = element_text(size = 8, family = "Courier"),
            plot.title = element_text(face = "bold", hjust = 0.5),
            axis.title = element_blank(),
            legend.position = "none") +
      ylim(range(dat1$y))
  
  p01 <- p00 + scale_color_manual(values = c("black", "red"))
  @ 
  
  \only<1>{
    
    <<echo = FALSE, cache = TRUE, fig.asp = 0.5>>=
    ggarrange(
        p00 + 
        geom_line(aes(group = id), alpha = 0.3) + 
        geom_point(size = 0.75) +
        ggtitle("Fully Observed Data"),
        
        p00 + 
        geom_line(data = dat2, mapping = aes(group = id), alpha = 0.3) +
        geom_point(data = dat2, size = 0.75) +
        ggtitle("Data with Attrition") +
        theme(axis.text.y = element_blank()),
        
        ncol = 2) %>%
        annotate_figure(left = text_grob("Y", 
                                         family = "Courier", 
                                         size = 10,
                                         rot = 90),
                        bottom = text_grob("Time", family = "Courier", size = 10)
                        )
    @
    
  }
  
  \only<2>{
    
    <<echo = FALSE, cache = TRUE, fig.asp = 0.5>>=
    ggarrange(
        p01 + 
        geom_line(data = dat3, aes(group = id, color = m2), alpha = 0.3) +
        geom_point(data = dat3, aes(color = m), size = 0.75) +
        ggtitle("Data Treated with LOCF"),
        
        p01 + 
        geom_line(data = dat3, aes(group = id, color = m2), alpha = 0.1) +
        geom_point(data = dat3, aes(color = m), alpha = 0.1, size = 0.75) +
        geom_smooth(data = dat3,
                    method = "lm",
                    se = FALSE,
                    color = "red",
                    size = 1) +
        geom_smooth(data = dat1,
                    method = "lm",
                    se = FALSE,
                    color = "black",
                    size = 1) +
        ggtitle("Correct vs. Imputed Trends") +
        theme(axis.text.y = element_blank()),
        
        ncol = 2) %>%
        annotate_figure(left = text_grob("Y", 
                                         family = "Courier", 
                                         size = 10,
                                         rot = 90),
                        bottom = text_grob("Time", family = "Courier", size = 10)
                        )
    @
    
  }
  
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<echo = FALSE>>=
  fullData <- dat1
  locfData <- dat3
  @
  
  <<>>=
  ## Fit some multilevel regression models
  fit1 <- lmer(y ~ t + (t | id), data = fullData)
  fit2 <- lmer(y ~ t + (t | id), data = locfData)
  @ 
  
  <<echo = FALSE, fig.asp = 0.5>>=
  rf1 <- ranef(fit1)[[1]]
  rf2 <- ranef(fit2)[[1]]

  rf <- data.frame(Data = rep(c("Full", "LOCF"), each = nrow(rf1)),
                   x = c(rf1$t, rf2$t)
                   )

  ff1 <- coef(fit1)[[1]]
  ff2 <- coef(fit2)[[1]]

  ff <- data.frame(Data = rep(c("Full", "LOCF"), each = nrow(ff1)),
                   x = c(ff1$t, ff2$t)
                   )
  
  ggarrange(
      ggplot(data = rf, mapping = aes(x = x, color = Data)) + 
      geom_density() +
      ggtitle("Random Effects") +
      scale_color_manual(values = c("black", "red")) +
      theme_classic() +
      theme(text = element_text(size = 8, family = "Courier"),
            plot.title = element_text(face = "bold", hjust = 0.5),
            axis.title = element_blank()
            ),
    
      ggplot(data = ff, mapping = aes(x = x, color = Data)) + 
      geom_density() +
      ggtitle("Fixed Effects") +
      scale_color_manual(values = c("black", "red")) +
      theme_classic() +
      theme(text = element_text(size = 8, family = "Courier"),
            plot.title = element_text(face = "bold", hjust = 0.5),
            axis.title = element_blank(),
            axis.text.y = element_blank()
            ),
      
      ncol = 2,
      common.legend = TRUE,
      legend = "right") %>%
      annotate_figure(left = text_grob("Density", 
                                       family = "Courier", 
                                       size = 10,
                                       rot = 90),
                      bottom = text_grob("Effect", family = "Courier", size = 10)
                      )
  @
  
\end{frame}

%------------------------------------------------------------------------------%

\section{OK Methods}

%------------------------------------------------------------------------------%

\begin{frame}{OK Methods (These sometimes work)}

  \begin{columns}
    \begin{column}{0.5\textwidth}

      Stochastic Regression Imputation
      \vc
      \begin{itemize}
      \item Fill $Y_{mis}$ with $\widehat{Y}_{mis}$ plus some random noise.
        \vc
        \begin{itemize}
        \item Produces unbiased parameter estimates and predictions
          \vc
        \item Computationally efficient
          \vc
        \item Attenuates standard errors
          \vc
        \item Makes CIs and prediction intervals too narrow
        \end{itemize}
      \end{itemize}

    \end{column}
    \begin{column}{0.5\textwidth}

      \only<1>{
        
        <<echo = FALSE>>=
        dat1  <- diabetes$dat1
        dat0  <- diabetes$dat0
        dat00 <- diabetes$dat00
        
        imputed <- dat1 %>%
            dplyr::select(bmi, glu) %>%
            mice(m         = 1,
                 maxit     = 1,
                 method    = "norm.nob",
                 seed      = 235711,
                 printFlag = FALSE) %>%
            complete(1)
        
        p1 + imputed %$% ylim(min(glu), max(glu))
        @ 
        
      }
      \only<2>{
        
        <<echo = FALSE, cache = TRUE>>=
        p2 <- p1 + geom_point(data = imputed[m, ],
                              mapping = aes(y = glu, x = bmi),
                              colour = "red")
        p2
        @
        
      }
      \only<3>{
        
        <<echo = FALSE, cache = TRUE>>=
        p2 + geom_smooth(data    = dat0,
                         mapping = aes(y = glu, x = bmi),
                         method  = "lm",
                         color   = "blue",
                         se      = FALSE) +
            geom_smooth(data    = imputed,
                        mapping = aes(y = glu, x = bmi),
                        method  = "lm",
                        color   = "red",
                        se      = FALSE)
        @
        
      }
      
    \end{column}
  \end{columns}

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}
  
  \begin{columns}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      imputed <- dat1 %>%
          dplyr::select(-bmi, -glu, -g) %>%
          data.frame(imputed, g = "Sto. Reg. Imp.")
      
      rbind(dat00, imputed) %>%
          ggplot(aes(x = glu, color = g)) +
          geom_density(size = 1) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          ylab("Density") +
          xlab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
      @
      
    \end{column}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE, cache = TRUE>>=
      rbind(dat00, imputed) %>%
          ggplot(aes(x = bmi, y = glu, color = g)) +
          geom_density_2d(bins = 15) +
          theme_classic() +
          theme(text = element_text(family = "Courier", size = 16)) +
          xlab("BMI") +
          ylab("Blood Glucose") +
          scale_color_manual(values = c("blue", "red")) +
          theme(legend.position = c(0.85, 0.075),
                legend.title = element_blank()
                )
      @
      
    \end{column}
  \end{columns}
  
\end{frame}

\watermarkon %-----------------------------------------------------------------%

\begin{frame}[fragile]{Implementation}
 
  <<eval = FALSE>>=
  miceOut <- mice(data = dat1, m = 1, seed = 42, method = "norm.nob") 
  impData <- complete(1)
  @ 

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{OK Methods (These sometimes work)}

  Nonresponse Weighting
  \vc
  \begin{itemize}
  \item Weight the observed cases to correct for nonresponse bias
    \vc
    \begin{itemize}
    \item Popular in survey research and official statistics
      \vc
    \item Only worth considering with \emph{Unit Nonresponse}
      \vc
    \item Doesn't make any sense with \emph{Item Nonresponse}
    \end{itemize}
  \end{itemize}

\end{frame}

%------------------------------------------------------------------------------%

\section{Comparisons}

%------------------------------------------------------------------------------%

\begin{frame}{Comparison}
  
  Run a Monte Carlo simulation to compare the treatments.
  \vc
  \begin{itemize}
  \item Use the synthetic diabetes data as the population.
    \vc
  \item Simulate MAR missingness.
    \vc
    \begin{itemize}
    \item Blood Glucose
      \begin{itemize}
      \item $PM = 20\%$, $P(M) \sim \{bmi, age\}$
      \end{itemize}
      \vc
    \item Blood Pressure
      \begin{itemize}
      \item $PM = 30\%$, $P(M) \sim \{bmi, tc\}$
      \end{itemize}
    \end{itemize}
    \vc
  \item Treat the missing data as above.
    \vc
  \item Use the treated data to estimate several statistics.
    \vc
  \item Repeat the process 250 times and pool the results.
  \end{itemize}
  
\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}{Comparison}
  
  \begin{columns}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE>>=
      dat1 <- readRDS(paste0(dataDir, "diabetes_incomplete.rds"))
      ggmice::plot_pattern(dat1)
      @
      
    \end{column}
    \begin{column}{0.5\textwidth}
      
      <<echo = FALSE>>=
      naniar::gg_miss_upset(dat1, nsets = 2)
      @
      
    \end{column}
  \end{columns}
  
\end{frame}

\watermarkon %-----------------------------------------------------------------%

\begin{frame}{Comparison}

  <<echo = FALSE>>=
  res  <- readRDS(paste0(dataDir, "treatment_simulation_results.rds"))
  meth <- c("MS", "DRI", "SRI", "CC", "FO")

  mTab  <- res$mean %>% select(-mi)
  lmTab <- with(res, rbind(coef, r2)) %>% select(-mi)

  bpCov <- res$cov[setdiff(names(res$cov), "mi")] %>%
      lapply(function(x) data.frame(x) %>% select(bp)) %>%
      do.call(cbind, .) %>%
      t() %>%
      data.frame()

  gluCov <- res$cov[setdiff(names(res$cov), "mi")] %>%
      lapply(function(x) data.frame(x) %>% select(glu)) %>%
      do.call(cbind, .) %>%
      t() %>%
      data.frame()

  vTab <- rbind(gluCov$glu, bpCov$bp)

  bpCov %<>% select(-bp)
  gluCov %<>% select(-glu)
  
  colnames(mTab) <- colnames(lmTab) <- colnames(vTab) <-
      rownames(bpCov) <- rownames(gluCov) <- meth

  rownames(vTab) <- rownames(mTab)
  rownames(lmTab) <- c("$\\beta_0$",
                       "$\\beta_{bmi}$",
                       "$\\beta_{glu}$",
                       "$\\beta_{age}$",
                       "$R^2$")
  
  mTab <- xtable(mTab,
                 align = c("l", rep("r", length(meth))),
                 caption = "Variable Means")

  vTab <- xtable(vTab,
                 align = c("l", rep("r", length(meth))),
                 caption = "Variable Variances")

  lmTab <- xtable(lmTab,
                  align = c("l", rep("r", length(meth))),
                  caption = "Linear Regression Estimates")

  @ 

  <<echo = FALSE, results = 'asis'>>=
  print(mTab, booktabs = TRUE, digits = 2)
  @

  <<echo = FALSE, results = 'asis'>>=
  print(vTab, booktabs = TRUE, digits = 2)
  @
    
\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Comparison}

  \begin{align*}
    Y_{BP} = \beta_0 + \beta_1 X_{BMI} + \beta_2 X_{Glucose} + \beta_3 X_{Age} +
    \varepsilon
  \end{align*}
  
  <<echo = FALSE, results = 'asis'>>=
  print(lmTab,
        booktabs = TRUE,
        sanitize.rownames.function = function(x) x,
        digits = 2)
  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Comparison}

  <<echo = FALSE, results = 'asis'>>=
  xtable(gluCov,
         auto = TRUE,
         digits = 2,
         caption = "Covariances with Blood Glucose")
  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}{Comparison}

  <<echo = FALSE, results = 'asis'>>=
  xtable(bpCov,
         auto = TRUE,
         digits = 2,
         caption = "Covariances with Blood Pressure")
  @

\end{frame}

%------------------------------------------------------------------------------%

\end{document}











\begin{frame}{Good Methods (These almost always work)}

  Multiple Imputation (MI)
  \vc
  \begin{itemize}
  \item Replace the missing values with $M$ plausible estimates
    \vc
    \begin{itemize}
    \item Essentially, a repeated application of stochastic regression
      imputation (with a particular type of regression model)
      \vc
    \item Produces unbiased parameter estimates and predictions
      \vc
    \item Produces ``correct'' standard errors, CIs, and prediction intervals
      \vc
    \item Very, very flexible
      \vc
    \item Computationally expensive
    \end{itemize}
  \end{itemize}

\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}[allowframebreaks, fragile]{Good Methods (These almost always
    work)}

  What happens when we apply MI to our previous MAR example?
  <<>>=
  ## Estimate imputation model:
  miceOut <- mice(data      = marData,
                  m         = 25,
                  maxit     = 1,
                  method    = "norm",
                  printFlag = FALSE)
  
  ## Estimate and pool M correlations:
  with(miceOut, cor(y, x))$analyses %>% unlist() %>% mean()
  @
  
  The MI-based parameter estimate looks good.
  \begin{itemize}
  \item MI produces unbiased estimates of the parameter when data are MAR.
  \end{itemize}

  \pagebreak
  
  <<echo = FALSE, out.width = "65%">>=
  impX <- impY <- list()
  for(m in 1 : miceOut$m) {
      tmp       <- density(complete(miceOut, m)$y)
      impX[[m]] <- tmp$x
      impY[[m]] <- tmp$y
  }
  
  pDat <- data.frame(x = unlist(impX),
                     y = unlist(impY),
                     g = rep(1 : miceOut$m, each = length(impX[[1]])),
                     c = "MAR w/ MI")
  
  pDat <- rbind.data.frame(pDat,
                           data.frame(x = yDen$x, 
                                      y = yDen$y, 
                                      g = miceOut$m + 1, 
                                      c = "Complete")
                           )
  
  ggplot(data    = pDat, 
         mapping = aes(x = x, y = y, color = c, group = g, size = c)
         ) +
      geom_line() +
      theme_classic() +
      theme(text = element_text(family = "Courier", size = 16)) +
      ylab("Density") +
      xlab("Value of Y") +
      scale_color_manual(values = c("black", "red")) +
      scale_size_manual(values = c(1, 0.5)) +
      theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile, allowframebreaks]{Good Methods (These \emph{almost} always work)}
  
  What about applying MI to our MNAR example?
  <<>>=
  ## Estimate imputation model:
  miceOut <- mice(data      = mnarData,
                  m         = 25,
                  maxit     = 1,
                  method    = "norm",
                  printFlag = FALSE)
  
  ## Estimate and pool M correlations:
  with(miceOut, cor(y, x))$analyses %>% unlist() %>% mean()
  @
  
  The MI-based parameter estimate is still biased.
  \begin{itemize}
  \item MI cannot correct bias in parameter estimates when data are MNAR.
  \end{itemize}
  
  \pagebreak
  
  <<echo = FALSE, out.width = "65%">>=
  mnarDen <- mnarData %$% density(y, na.rm = TRUE)
  
  impX <- impY <- list()
  for(m in 1 : miceOut$m) {
      tmp       <- density(complete(miceOut, m)$y)
      impX[[m]] <- tmp$x
      impY[[m]] <- tmp$y
  }
  
  pDat <- data.frame(x = unlist(impX),
                     y = unlist(impY),
                     g = rep(1:miceOut$m, each = length(impX[[1]])),
                     c = "MNAR w/ MI")
  
  pDat <- rbind.data.frame(pDat,
                           data.frame(x = mnarDen$x, 
                                      y = mnarDen$y, 
                                      g = miceOut$m + 1, 
                                      c = "MNAR w/ Deletion"),
                           data.frame(x = yDen$x, 
                                      y = yDen$y, 
                                      g = miceOut$m + 2,
                                      c = "Complete")
                           )
  
  ggplot(data = pDat, mapping = aes(x = x, y = y, color = c, group = g, size = c)) +
      geom_line() +
      theme_classic() +
      theme(text = element_text(family = "Courier", size = 16)) +
      ylab("Density") +
      xlab("Value of Y") +
      scale_color_manual(values = c("black", "blue", "red")) +
      scale_size_manual(values = c(1, 1, 0.5)) +
      theme(legend.position = c(0.8, 0.95), legend.title = element_blank())
  @
  
\end{frame}

\watermarkon %-----------------------------------------------------------------%


\begin{frame}[fragile]{Example}
 
  <<>>=
  miceOut <- mice(data      = dat1, 
                  m         = 25, 
                  maxit     = 20,
                  printFlag = FALSE,
                  method    = "norm")
  @ 

\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  dat0 %>% select(bmi, glu, bp) %>% cor()
  pooledCorMat(miceOut, c("bmi", "glu", "bp"))
  @ 

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  mean(dat0$glu)
  with(miceOut, mean(glu))$analyses %>% unlist() %>% mean()
  var(dat0$glu)
  with(miceOut, var(glu))$analyses %>% unlist() %>% mean()
  @ 

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  fit1 <- lm(glu ~ bmi + bp, data = dat0)
  fit2 <- with(miceOut, lm(glu ~ bmi + bp))
  
  summary(fit1)$r.squared
  pool.r.squared(fit2)
  @ 

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  summary(fit1)$coef
  pool(fit2) %>% summary() %>% select(-df)
  @
  
\end{frame}

\watermarkon %-----------------------------------------------------------------%

\begin{frame}[allowframebreaks]{Good Methods (These almost always work)}

  Bayesian Modeling
  \vc
  \begin{itemize}
  \item Treat missing values as just another parameter to be estimated
    \vc
    \begin{itemize}
    \item Models can be directly estimated in the presence of missing data
      \begin{itemize}
      \item Essentially, runs MI behind-the-scenes during model estimation
      \end{itemize}
      \vc
    \item The predictors of nonresponse must be included in the model, somehow
      \vc
    \item Computationally expensive
    \end{itemize}
  \end{itemize}

  \pagebreak

  Full Information Maximum Likelihood (FIML)
  \vc
  \begin{itemize}
  \item Adjust the objective function to only consider the observed parts of the
    data
    \vc
    \begin{itemize}
    \item Models are directly estimated in the presence of missing data
      \vc
    \item The predictors of nonresponse must be included in the model, somehow
      \vc
    \item Unless you write your own optimization program, FIML is only available
      for certain types of models
      \vc
    \item In linear regression models, FIML cannot treat missing data on
      predictors (if the predictors are taken as fixed)
    \end{itemize}
  \end{itemize}

\end{frame}

\watermarkoff %----------------------------------------------------------------%

\begin{frame}[fragile]{Example}
  
  <<>>=
  fit <- dat1 %>% 
      select(bmi, glu, bp) %>% 
      lavCor(missing = "fiml", output = "sampstat")
  
  mean(dat0$glu)
  fit$mean["glu"]
  @   

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  dat0 %>% select(bmi, glu, bp) %>% cov()
  fit$cov
  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  mod <- "glu ~ 1 + bmi + bp"
  fit <- sem(mod, data = dat1, missing = "fiml")
  
  summary(fit1)$r.squared
  inspect(fit, "r2")
  @

\end{frame}

%------------------------------------------------------------------------------%

\begin{frame}[fragile]{Example}

  <<>>=
  summary(fit1)$coef %>% round(3)
  parameterEstimates(fit, ci = FALSE)[1:4, ]
  @

\end{frame}

\watermarkon %-----------------------------------------------------------------%

\begin{frame}[allowframebreaks]{References}

  \bibliographystyle{apacite}
  \bibliography{../../../bibtex/winter_school_refs.bib}

\end{frame}

%------------------------------------------------------------------------------%

\end{document}
