### Title:    FCS Example
### Author:   Kyle M. Lang
### Created:  2018-OCT-15
### Modified: 2018-OCT-15

library(devtools)
install_github("kylelang/SURF/source/SURF", ref = "develop")

library(SURF)

##### Set up the problem #####
parms <- list()
parms$nObs <- 1000
parms$pm <- 0.3
parms$auxVar <- "z"
parms$incompVars <- c("w", "x", "y")
parms$meanVec <- c(1 : 4)
parms$corVal <- 0.25
parms$marType <- c("lower", "center", "upper")

## Simulate some data:
simData <- simCovData(nObs  = 1000,
                      sigma = 0.25,
                      nVars = 4,
                      means = 1 : 4)
missData <- imposeMissData(data    = simData,
                           targets = list(mar = paste0("x", 1 : 3)),
                           preds   = "x4",
                           pm      = 0.3,
                           snr     = 5.0,
                           pattern = c(x1 = "low", x2 = "center", x3 = "high")
                           )

v <- "x1"
data <- impData
rVec <- rMat[ , v]

eif <- function(data, rVec, v) {
    ## Get the expected betas:
    fit  <- lm(paste(v, "~ ."), data = data[rVec, ])
    beta <- coef(fit)
    
    ## Sample sigma:
    sigmaScale <- (1 / fit$df) * crossprod(resid(fit))
    sigmaSam   <- rinvchisq(1, df = fit$df, scale = sigmaScale)
    
    ## Sample beta:
    betaVar <- sigmaSam * solve(crossprod(qr.X(fit$qr)))
    betaSam <- rmvnorm(1, mean = beta, sigma = betaVar)
    
    ## Return a randomly sampled imputation:
    predict(fit, newdata = data[!rVec, ]) + rnorm(sum(!rVec), 0, sqrt(sigmaSam))
}

targets <- paste0("x", 1 : 3)

## Iterate through the FCS algorithm:
impList <- list()
for(s in 1 : nSams) {
    for(v in targets) {
        rVec              <- rMat[ , v]
        impData[!rVec, v] <- eif(data = impData, rVec = rVec, v = v)
    }# END for(v in incompVars)
    
    ## If the chains are burnt-in, save imputed datasets:
    if(s > nBurn) impList[[s - nBurn]] <- impData
}# END for(s in nSams)
